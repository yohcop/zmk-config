/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>

&lt {
    quick-tap-ms = <200>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        tm: thumb_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
// ---------------------------------------------------------------------------------------------------------------------------------
// Hold keys: (mods are symetrical)
// |     | A-G | C-G | C-A | SCA |                    |     |     |     |     |     |
// |     |  G  |  A  |  C  | CAG |                    |     |     |     |     |     |
// |     | S-G | S-A | S-C | SCAG|                    |     |     |     |     |     |
//                         | L3  |     |        | L2  | L4  |     
// ---------------------------------------------------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |                    |  Y  |  U  |  I  |  O  |  P  |
// |  A  |  S  |  D  |  F  |  G  |                    |  H  |  J  |  K  |  L  |  ;  |
// |  Z  |  X  |  C  |  V  |  B  |                    |  N  |  M  |  ,  |  .  |  /  |
//                         | TAB |Shift|        | RET | SPC |
            bindings = <
    &kp Q &hm LA(LGUI) W &hm LC(LGUI) E &hm LA(LCTRL) R &hm LS(LC(LALT))     T                            &hm RS(RC(RALT))     Y &hm RA(RCTRL) U &hm RC(RGUI) I     &hm RA(RGUI) O   &kp P     
    &kp A &hm    LGUI  S &hm    LALT  D &hm    LCTRL  F &hm LC(LA(LGUI))     G                            &hm RC(RA(RGUI))     H &hm    RCTRL  J &hm    RALT  K     &hm    RGUI  L   &kp SEMI
    &kp Z &hm LS(LGUI) X &hm LS(LALT) C &hm LS(LCTRL) V &hm LS(LC(LA(LGUI))) B                            &hm RS(RC(RA(RGUI))) N &hm RS(RCTRL) M &hm RS(RALT) COMMA &hm RS(RGUI) DOT &kp FSLH  
                                                        &lt 3 TAB              &kp LSHFT        &lt 2 RET &lt 4 SPACE
            >;
        };

        layer_1 {
// ---------------------------------------------------------------------------------------------------------------------------------
// Hold keys: Same as above
// ---------------------------------------------------------------------------------------------------------------------------------
// Tap keys for Colemak
// |  Q  |  W  |  F  |  P  |  B  |                    |  J  |  L  |  U  |  Y  |  ;  |
// |  A  |  R  |  S  |  T  |  G  |                    |  M  |  N  |  E  |  I  |  O  |
// |  Z  |  X  |  C  |  D  |  V  |                    |  K  |  H  |  ,  |  .  |  /  |
//                         | TAB | SPC |        |     | RET |
            bindings = <
    &kp Q &hm LA(LGUI) W &hm LC(LGUI) F &hm LA(LCTRL) P &hm LS(LC(LALT))     B                              &hm RS(RC(RA(RGUI))) J &hm RA(RCTRL) L &hm RC(RGUI) U     &hm RA(RGUI) Y   &kp SEMI
    &kp A &hm    LGUI  R &hm    LALT  S &hm    LCTRL  T &hm LC(LA(LGUI))     G                              &hm RC(RA(RGUI))     M &hm    RCTRL  N &hm    RALT  E     &hm    RGUI  I   &kp O
    &kp Z &hm LS(LGUI) X &hm LS(LALT) C &hm LS(LCTRL) D &hm LS(LC(LA(LGUI))) V                              &hm RS(RC(RALT))     K &hm RS(RCTRL) H &hm RS(RALT) COMMA &hm RS(RGUI) DOT &kp FSLH
                                                        &lt 3 TAB              &kp LSHFT          &lt 2 RET &lt 4 SPACE
            >;
        };

        layer_2 {
// ---------------------------------------------------------------------------------------------------------------------------------
// |  !  |  @  |  #  |  $  |  %  |                     |  ^  |  &  |  *  |  ~  |  |   |
// |  1  |  2  |  3  |  4  |  5  |                     |  6  |  7  |  8  |  9  |  0   |
// |  {  |  [  |  (  |  =  |  -  |                     |  _  |  +  |  )  |  ]  |  }   |
//                         |     |     |        |      |     |
            bindings = <
    &kp EXCL &hm LA(LGUI) AT   &hm LC(LGUI) HASH  &hm LA(LCTRL) DLLR  &hm LS(LC(LALT))     PRCNT                      &kp CARET  &kp AMPS &kp STAR &kp TILDE &kp PIPE
    &kp N1   &hm    LGUI  N2   &hm    LALT  N3    &hm    LCTRL  N4    &hm LC(LA(LGUI))     N5                         &kp N6     &kp N7   &kp N8   &kp N9    &kp N0  
    &kp LBRC &hm LS(LGUI) LBKT &hm LS(LALT) LPAR  &hm LS(LCTRL) EQUAL &hm LS(LC(LA(LGUI))) MINUS                      &kp UNDER  &kp PLUS &kp RPAR &kp RBKT  &kp RBRC
                                                                      &trans                     &trans        &trans &trans
            >;
        };

        layer_3 {
// ---------------------------------------------------------------------------------------------------------------------------------
// | F1  | F2  | F3  | F4  | F5  |                    | F6  | F7  | F8  | F9  | F10 |
// | ESC |PLAY |VOL-U|VOL-D|MUTE |                    |PrScr|ScrLk|Pause|Inser| F11 |
// |PAUSE| RWD | PREV|NEXT | FWD |                    | App |     |     |     | F12 |
//                         |     |     |        |     |     |
            bindings = <    
    &kp F1      &kp F2     &kp F3       &kp F4       &kp F5                          &kp F6          &kp F7             &kp F8          &kp F9     &kp F10
    &kp ESC     &kp C_PLAY &kp K_VOL_UP &kp K_VOL_DN &kp C_MUTE                      &kp PRINTSCREEN &kp LOCKING_SCROLL &kp PAUSE_BREAK &kp INSERT &kp F11
    &kp C_PAUSE &kp C_RW   &kp C_PREV   &kp C_NEXT   &kp C_FF                        &kp K_APP       &none              &none           &none      &kp F12 
                                                     &trans     &mo 5         &trans &trans
            >;
        };

        layer_4 {
// QWERT is going to layer 0 for qerty
// COLMK is going to layer 1 for colemak
// ---------------------------------------------------------------------------------------------------------------------------------
// |QWERT|COLMK|     |RESET|BT/USB|                   |     |     | BKS | DEL |     |
// |     |     |     |     |     |                    |LEFT |DOWN | UP  |RIGHT|     |
// |  \  |  `  |  '  |  "  |     |                    |HOME |P-DW |P-UP | END |  /  |
//                         |     |     |        |     |     |            
            bindings = <
    &none    &kp LA(LGUI)       &kp LC(LGUI)     &kp LA(LCTRL)     &kp LS(LC(LALT))                          &none    &none     &kp BSPC  &kp DEL   &none
    &none    &kp    LGUI        &kp    LALT      &kp    LCTRL      &kp LC(LA(LGUI))                          &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &none
    &kp BSLH &hm LS(LGUI) GRAVE &hm LS(LALT) SQT &hm LS(LCTRL) DQT &kp LS(LC(LA(LGUI)))                      &kp HOME &kp PG_DN &kp PG_UP &kp END   &kp FSLH
                                                                   &trans               &trans        &trans &trans
            >;
        };

        layer_5 {
// ---------------------------------------------------------------------------------------------------------------------------------
// |     |     |     |     |     |                    |     |     |     |     |     |
// |     |     |     |     |     |                    |     |     |     |     |     |
// |     |     |     |     |     |                    |     |     |     |     |     |
//                         |     |     |        |     |     |
            bindings = <
    &to 0  &to 1  &trans &trans &sys_reset                  &trans &trans &trans &trans  &out OUT_TOG
    &trans &trans &trans &trans &trans                      &trans &trans &trans &trans  &trans
    &trans &trans &trans &trans &trans                      &trans &trans &trans &trans  &trans
                                &trans &trans        &trans &trans
            >;
        };

    };
};
